<?php
/**
 * Declaration of UploadRoundController class.
 *
 * @category EotvosVerseny
 * @package Controller
 * @author Zsolt Parragi <zsolt.parragi@cancellar.hu>
 * @copyright 2011, Cancellar Informatikai Bt
 * @license http://www.opensource.org/licenses/BSD-2-Clause
 */

namespace Eotvos\DemoBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Symfony\Component\DependencyInjection\ContainerAware;

use Symfony\Component\HttpFoundation\RedirectResponse;

use Eotvos\VersenyrBundle\Entity\Submission;
use Eotvos\DemoBundle\Entity\UploadRoundSecurityToken;

use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

use Symfony\Component\HttpFoundation\Response;


use Eotvos\DemoBundle\Form\SimpleFileForm;
use Eotvos\DemoBundle\Extension\ExtToMime;

/**
 * Controller for rounds requiring a single file upload.
 *
 * This class is used as a service, indetified by "eotvos.versenyr.round.upload"
 *
 * @todo describe the process
 * @todo move general route parts here
 *
 * @todo check round type at many places!
 *
 * @category EotvosVerseny
 * @package Controller
 * @license http://www.opensource.org/licenses/BSD-2-Clause
 * @author Zsolt Parragi <zsolt.parragi@cancellar.hu>
 * @since   2011-09-26
 * @version 2011-10-11
 */
class UploadRoundController extends ContainerAware
{
    /**
     * Renders a view.
     *
     * Copied from symfony's Controller class.
     *
     * @param string   $view The view name
     * @param array    $parameters An array of parameters to pass to the view
     * @param Response $response A response instance
     *
     * @return Response A Response instance
     *
     * @author Fabien Potencier <fabien@symfony.com>
     * @version 2011-10-11
     * @since   2011-10-11
     */
    protected function render($view, array $parameters = array(), Response $response = null)
    {
        return $this->container->get('templating')->renderResponse($view, $parameters, $response);
    }

    /**
     * Sends a file previously uploaded by the current user as a download
     *
     * @param int $term
     * @param string $selectionSlug
     * @param string $roundSlug
     * @param int $submissionId
     *
     * @Route("/{term}/szekcio/{sectionSlug}/fordulo/{roundSlug}/upd/download/{submissionId}", name = "competition_round_upd_download" )
     */
    public function downloadAction($term, $sectionSlug, $roundSlug, $submissionId){
        $user = $this->container->get('security.context')->getToken()->getUser();
        if(!$user){
            throw new AccessDeniedException('Az oldal eléréséhez be kell jelentkezned!');
        }

        $tpRep = $this->container->get('doctrine')->getRepository('\EotvosVersenyrBundle:TextPage');

        $roundRec = $tpRep->getForTermWithSlug($term, $roundSlug);
        if(!$roundRec){
            throw new NotFoundHttpException("Record not found");
        }

        $sectionRec = $tpRep->getForTermWithSlug($term, $sectionSlug);
        if(!$sectionRec){
            throw new NotFoundHttpException("Section not found");
        }

        $config = json_decode($roundRec->getRound()->getConfig());
        if(!is_object($config)){
            throw new NotFoundHttpException("Bad configuration for round");
        }

        $subRep = $this->container->get('doctrine')->getRepository('\EotvosVersenyrBundle:Submission');
        $subRec = $subRep->findOneById((int)$submissionId);
        $subDat = json_decode($subRec->getData());

        if($subRec->getUserId()!=$user){
            throw new AccessDeniedException('This isnt your upload!');
        }

        $fileExt = pathinfo($subDat->filename, PATHINFO_EXTENSION);
        $fileContent = file_get_contents('../uploads/'.$subRec->getId().'.'.$fileExt);

        $extToMime = new ExtToMime();

        $headers = array('Content-Type'     => $extToMime->system_extension_mime_type($subDat->filename),
            'Content-Disposition' => 'inline; filename="'.addslashes($subDat->filename).'"');

        return new Response($fileContent, 200, $headers);
    }

    /**
     * Submits a new file using a security token generated by uploadAction.
     *
     * Session isn't checked because swfupload lacks normal cookie support.
     *
     * ### ChangeLog:
     * #### 2011-10-21: Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * * Added cateogory to form
     *
     * @param string $securityToken
     * 
     * @todo check for round still active
     *
     * @author Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * @since   2011-10-11
     * @version 2011-10-21
     *
     * @Route("/{term}/szekcio/{sectionSlug}/fordulo/{roundSlug}/upd/flash/{securityToken}", name = "competition_round_upd_flashupload", defaults = { "_format" = "json" } )
     */
    public function flashUploadAction($securityToken)
    {
        $tokenRep = $this->container->get('doctrine')->getRepository('\EotvosDemoBundle:UploadRoundSecurityToken');

        $tokenRec = $tokenRep->findOneByToken($securityToken);
        if(!$tokenRec){
            throw new NotFoundHttpException("A megadott token nem talalhato!");
        }
        if(!$tokenRec->isStillValid()){
            throw new NotFoundHttpException("A megadott token mar nem ervenyes!");
        }


        $roundRec = $tokenRec->getRound();
        $user = $tokenRec->getUser();

        $config = json_decode($roundRec->getConfig());
        if(!is_object($config)){
            throw new NotFoundHttpException("A megadott token mar nem ervenyes!");
        }

        $dEm = $this->container->get('doctrine')->getEntityManager();

        $tokenRec->setUsedUp(true);
        $dEm->persist($tokenRec);

        $formBuilder = new SimpleFileForm();
        $form = $formBuilder->buildForm($this->container, $config);

        // classic, not swf based file upload ???
        if ($this->container->get('request')->getMethod() === 'POST') {
            if($formBuilder->createFile($dEm, $config, $user, $roundRec, $form, $this->container->get('request'))==true){

                $response = new Response(json_encode(array( 'success' => true)));
                return $response;
            }
        }

        // we are flushing in formBuilder... that's probably bad, TODO
        //$dEm->flush();


        throw new NotFoundHttpException("Feltoltesi hiba!"); // internal server error, TODO?

    }

    /**
     * Renders the files uploaded by the current user.
     *
     * ### ChangeLog:
     * #### 2011-10-21: Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * * Added category option.
     * #### 2011-10-11: Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * * Added sanity and security checks.
     * #### 2011-10-03: Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * * Added documentation
     *
     * @param int $term
     * @param string $selectionSlug
     * @param string $roundSlug
     *
     * @author Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * @since   2011-09-29
     * @version 2011-10-21
     *
     * @todo remove redundant template parameters
     *
     * @Route("/{term}/szekcio/{sectionSlug}/fordulo/{roundSlug}/upd/lista", name = "competition_round_upd_list" )
     * @Template()
     */
    public function listAction($term, $sectionSlug, $roundSlug){
        $user = $this->container->get('security.context')->getToken()->getUser();
        if(!$user){
            throw new AccessDeniedException('Az oldal eléréséhez be kell jelentkezned!');
        }

        $termRec = $this->container->get('doctrine')->getRepository('EotvosVersenyrBundle:Term')->findOneByName($term);

        $tpRep = $this->container->get('doctrine')->getRepository('\EotvosVersenyrBundle:TextPage');

        $roundRec = $tpRep->getForTermWithSlug($term, $roundSlug);
        if(!$roundRec){
            throw new NotFoundHttpException("Record not found");
        }

        $sectionRec = $tpRep->getForTermWithSlug($term, $sectionSlug);
        if(!$sectionRec){
            throw new NotFoundHttpException("Section not found");
        }

        $config = json_decode($roundRec->getRound()->getConfig());
        if(!is_object($config)){
            throw new NotFoundHttpException("Bad configuration for round");
        }

        $subRep = $this->container->get('doctrine')->getRepository('\EotvosVersenyrBundle:Submission');
        $submissions = $subRep->getByUserAndRound($user, $roundRec->getRound());
        // no check: submission count may be zero


        return array(
            'term' => $termRec,
            'config' => $config,
            'page' => $roundRec,
            'submissions' => $submissions,
            'round' => $roundRec->getRound(),
            'section' => $sectionRec->getSection(),
        );
    }

    /**
     * Finalizes the last submission of the user
     *
     * ### ChangeLog:
     * #### 2011-10-11: Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * * Added sanity and security checks.
     * #### 2011-10-03: Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * * Added documentation
     *
     * @param int $term
     * @param string $selectionSlug
     * @param string $roundSlug
     *
     * @author Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * @since   2011-09-29
     * @version 2011-10-11
     *
     * @todo remove redundant template parameters
     * @todo check for already finalized
     * @todo no submission check shouldn't throw 404, but what?
     *
     * @Route("/{term}/szekcio/{sectionSlug}/fordulo/{roundSlug}/upd/veglegesit", name = "competition_round_upd_finalize" )
     * @Template()
     */
    function finalizeAction($term, $sectionSlug, $roundSlug){
        $user = $this->container->get('security.context')->getToken()->getUser();
        if(!$user){
            return $this->render('EotvosVersenyrBundle::error.twig.html', array(
                'code' => 401,
            ));
        }

        $termRec = $this->container->get('doctrine')->getRepository('EotvosVersenyrBundle:Term')->findOneByName($term);

        $tpRep = $this->container->get('doctrine')->getRepository('\EotvosVersenyrBundle:TextPage');

        $roundRec = $tpRep->getForTermWithSlug($term, $roundSlug);
        if(!$roundRec){
            return $this->render('EotvosVersenyrBundle::error.twig.html', array(
                'code' => 404,
            ));
        }

        $sectionRec = $tpRep->getForTermWithSlug($term, $sectionSlug);
        if(!$sectionRec){
            return $this->render('EotvosVersenyrBundle::error.twig.html', array(
                'code' => 404,
            ));
        }

        $config = json_decode($roundRec->getRound()->getConfig());
        if(!is_object($config)){
            return $this->render('EotvosVersenyrBundle::error.twig.html', array(
                'code' => 500,
            ));
        }

        $sr = $this->container->get('doctrine')->getRepository('\EotvosVersenyrBundle:Submission');
        $submissions = $sr->getByUserAndRound($user, $roundRec->getRound());

        if(count($submissions)<1){
            return $this->render('EotvosVersenyrBundle::error.twig.html', array(
                'code' => 404,
            ));
        }


        if ($this->container->get('request')->getMethod() === 'POST') {
            $em = $this->container->get('doctrine')->getEntityManager();
            $submissions[0]->setFinalized(true);
            $em->persist($submissions[0]);
            $em->flush();
            return new RedirectResponse( ($this->container->get('router')->generate('competition_round', array( 'term' => $term, 'sectionSlug' => $sectionRec->getSlug(), 'roundSlug' => $roundRec->getSlug() ))), 302);
        }else{
            return array(
                'config' => $config,
                'round' => $roundRec->getRound(),
                'page' => $roundRec,
                'section' => $sectionRec->getSection(),
                'submission' => $submissions[0],
                'submdata' => json_decode($submissions[0]->getData()),
                'term' => $termRec,
            );
        }
    }

    /**
     * Allows the user to upload a new file.
     *
     * @param int $term
     * @param string $selectionSlug
     * @param string $roundSlug
     *
     * @author Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * @since   2011-09-29
     * @version 2011-10-21
     *
     * @Route("/{term}/szekcio/{sectionSlug}/fordulo/{roundSlug}/upd/feltoltes", name = "competition_round_upd_upload" )
     * @Template()
     */
    public function uploadAction($term, $sectionSlug, $roundSlug)
    {
        $user = $this->container->get('security.context')->getToken()->getUser();
        if(!$this->container->get('security.context')->isGranted('ROLE_USER')){
            throw new AccessDeniedException('Az oldal eléréséhez be kell jelentkezned!');
        }

        $termRec = $this->container->get('doctrine')->getRepository('EotvosVersenyrBundle:Term')->findOneByName($term);

        $tpRep = $this->container->get('doctrine')->getRepository('\EotvosVersenyrBundle:TextPage');

        $dEm = $this->container->get('doctrine')->getEntityManager();

        $roundRec = $tpRep->getForTermWithSlug($term, $roundSlug);
        if(!$roundRec){
            return $this->render('EotvosVersenyrBundle::error.twig.html', array(
                'code' => 404,
            ));
        }

        $sectionRec = $tpRep->getForTermWithSlug($term, $sectionSlug);
        if(!$sectionRec){
            return $this->render('EotvosVersenyrBundle::error.twig.html', array(
                'code' => 404,
            ));
        }

        $config = json_decode($roundRec->getRound()->getConfig());
        if(!is_object($config)){
            return $this->render('EotvosVersenyrBundle::error.twig.html', array(
                'code' => 500,
            ));
        }

        $sr = $this->container->get('doctrine')->getRepository('\EotvosVersenyrBundle:Submission');
        $submissions = $sr->getByUserAndRound($user, $roundRec->getRound());


        // GENERATE TOKEN

        $securityToken = new UploadRoundSecurityToken();
        $securityToken->setUser($user);
        $securityToken->setRound($roundRec->getRound());
        $securityToken->setTerm($term);
        $dEm->persist($securityToken);
        $dEm->flush();

        // GENERATE FORM
        $formBuilder = new SimpleFileForm();
        $form = $formBuilder->buildForm($this->container, $config);

        // classic, not swf based file upload ???
        if ($this->container->get('request')->getMethod() === 'POST') {
            if($formBuilder->createFile($em, $form, $config, $this->container->get('request'))){
                return new RedirectResponse( ($this->container->get('router')->generate('competition_round', array( 'term' => $term, 'sectionSlug' => $sectionRec->getSlug(), 'slug' => $roundRec->getSlug() ))), 302);
            }
        }

        if(isset($config->categories) && is_array($config->categories)){
            $categories = $config->categories;
        }else{
            $categories = array();
        }

        return array(
            'config' => $config,
            'categories' => $categories,
            'round' => $roundRec->getRound(),
            'section' => $sectionRec->getSection(),
            'form' => $form->createView(),
            'token' => $securityToken,
            'term' => $termRec,
        );
    }

    /**
     * Returns the template name for the round description panel.
     *
     * ### ChangeLog:
     * #### 2011-10-03: Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * * Added documentation
     *
     * @author Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * @since   2011-09-29
     * @version 2011-10-03
     *
     * @return string
     */
    function getTemplateName(){
        return "eotvos_verseny.round.upload:activeDescriptionAction";
    }

    /**
     * Renders the content for the round description panel.
     *
     * ### ChangeLog:
     * #### 2011-10-11: Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * * Added and changed checks
     * #### 2011-10-03: Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * * Added documentation
     *
     * @param Round $round
     *
     * @author Zsolt Parragi <zsolt.parragi@cancellar.hu>
     * @since   2011-09-29
     * @version 2011-10-11
     *
     * @todo variable names
     * @todo out: submission checks
     *
     * @Template()
     */
    function activeDescriptionAction($round){
        $user = $this->container->get('security.context')->getToken()->getUser();
        $sr = $this->container->get('doctrine')->getRepository('\EotvosVersenyrBundle:Submission');
        $submissions = $sr->getByUserAndRound($user, $round);
        $submitted =false;
        foreach($submissions as $submission){
            $submitted = true;
            if($submission->getFinalized()){
            }
        }

        //$arr = array('filetypes' => array('a', 'b', 'c'), 'maxfilesize' => 2048);
        //echo json_encode($arr);
        //die(json_decode($round->getRound()->getConfig()));
        return array('round' => $round->getRound(), 'spec' => json_decode($round->getRound()->getConfig()), 'user' => $user, 'submitted' => $submitted );
    }

}
